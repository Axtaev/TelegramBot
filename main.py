import os
import random
import asyncio
from datetime import datetime, timedelta

from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from openai import AsyncOpenAI
import nest_asyncio

from dotenv import load_dotenv

load_dotenv()


# üîê –ö–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
chat_ids_str = os.getenv("CHAT_IDS", "")
chat_ids = [int(cid.strip()) for cid in chat_ids_str.split(",") if cid.strip().isdigit()]
if not chat_ids:
    chat_ids = [7034170724, 7602795208]

# üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
bot_instance: Bot = None

# üéÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
async def generate_compliment():
    prompt_variants = [
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ê–∑–∏–∑–µ –≤ –≤–∏–¥–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.",
        "–°–¥–µ–ª–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –¥–ª—è –¥–µ–≤—É—à–∫–∏ –ê–∑–∏–∑—ã, –±—É–¥—Ç–æ —Ç—ã –ø–æ—ç—Ç.",
        "–°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ê–∑–∏–∑–µ, —á—Ç–æ–±—ã —É –Ω–µ—ë –∑–∞—â–µ–º–∏–ª–æ –≤ –≥—Ä—É–¥–∏ üíñ",
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø–µ–≤–µ—Ü –∏ –ø–æ—ë—à—å –ê–∑–∏–∑–µ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ—á–∫—É –∏–∑ –ø–µ—Å–Ω–∏-–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.",
        "–°–¥–µ–ª–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ê–∑–∏–∑–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –≤–æ–ª—à–µ–±–Ω–∏–∫ –∏–∑ —Å–∫–∞–∑–∫–∏ ‚ú®",
        "–ü—Ä–∏–¥—É–º–∞–π –Ω–µ–∂–Ω—ã–π –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ê–∑–∏–∑–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –≥–æ–≤–æ—Ä–∏–ª.",
        "–ù–∞–ø–∏—à–∏ —Å—Ç—Ä–æ—á–∫—É, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∞ –∏–∑ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è –ê–∑–∏–∑—ã.",
        "–°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –æ –µ—ë –∫—Ä–∞—Å–æ—Ç–µ, –Ω–æ –Ω–µ –±–∞–Ω–∞–ª—å–Ω–æ, –∞ –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∞ —ç–ø–æ—Ö–∏ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è.",
        "–°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —Å–µ–±—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ.",
        "–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –±—É–¥—Ç–æ –æ—Ç –º—ã—Å–ª–∏—Ç–µ–ª—è, –≤–ª—é–±–ª—ë–Ω–Ω–æ–≥–æ –≤ –ê–∑–∏–∑—É."
    ]

    prompt = random.choice(prompt_variants)

    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤, —Å—Ç–∏—Ö–æ–≤ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–µ–≤—É—à–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –ê–∑–∏–∑–∞. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏ —Å —ç–º–æ–¥–∑–∏. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        max_tokens=250,
        temperature=1.2
    )

    return response.choices[0].message.content.strip()


# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
async def send_compliment():
    try:
        compliment = await generate_compliment()
        print(f"[üíå] –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç: {compliment}")
        for uid in chat_ids:
            await bot_instance.send_message(chat_id=uid, text=compliment)
            print(f"[üì§] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Üí {uid}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    username = update.effective_user.username or "–±–µ–∑ username"

    if user_id not in chat_ids:
        chat_ids.append(user_id)

    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å —Ç–æ–±–æ–π ‚Äî –∏ —Å —Ç–µ–ø–ª–æ–º üíñ")
    print(f"[‚úÖ] /start –æ—Ç @{username} ({user_id})")

    run_time = datetime.now() + timedelta(minutes=1)
    scheduler.add_job(send_compliment, 'date', run_date=run_time)
    print(f"[‚è≥] –ü–µ—Ä–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –≤ {run_time.strftime('%H:%M:%S')}")

# üöÄ –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    global bot_instance
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot_instance = app.bot

    app.add_handler(CommandHandler("start", start))
    scheduler.start()

    # üìÜ –ü–ª–∞–Ω 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å
    for _ in range(13):
        h = random.randint(0, 23)   # –æ—Ç 0 –¥–æ 23 —á–∞—Å–æ–≤
        m = random.randint(0, 59)   # –æ—Ç 0 –¥–æ 59 –º–∏–Ω—É—Ç
        scheduler.add_job(send_compliment, 'cron', hour=h, minute=m)
        print(f"[üïí] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω ‚Üí {h:02}:{m:02}")


    print("üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏ /start –≤ Telegram.")

    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    # ‚ùó –ñ–¥—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    await asyncio.Event().wait()

# ‚ö° –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
